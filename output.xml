<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[Stories by Warren Veerasingam on Medium]]></title>
        <description><![CDATA[Stories by Warren Veerasingam on Medium]]></description>
        <link>https://medium.com/@warrensbox?source=rss-b22c913cfb2------2</link>
        <image>
            <url>https://cdn-images-1.medium.com/fit/c/150/150/1*CRIy2Do0v9-cSfUWIg2oLA.jpeg</url>
            <title>Stories by Warren Veerasingam on Medium</title>
            <link>https://medium.com/@warrensbox?source=rss-b22c913cfb2------2</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Tue, 19 Apr 2022 22:53:14 GMT</lastBuildDate>
        <atom:link href="https://medium.com/@warrensbox/feed" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[How to download and install binaries from GitHub?]]></title>
            <link>https://warrensbox.medium.com/how-to-download-and-install-binaries-from-github-4d5939fc6a61?source=rss-b22c913cfb2------2</link>
            <guid isPermaLink="false">https://medium.com/p/4d5939fc6a61</guid>
            <category><![CDATA[devops]]></category>
            <category><![CDATA[github-release]]></category>
            <category><![CDATA[github]]></category>
            <category><![CDATA[github-pages]]></category>
            <category><![CDATA[github-actions]]></category>
            <dc:creator><![CDATA[Warren Veerasingam]]></dc:creator>
            <pubDate>Sat, 03 Jul 2021 06:32:39 GMT</pubDate>
            <atom:updated>2021-07-03T06:34:32.349Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/740/1*fV_hi9XykxAYJ4WgqLjihA.jpeg" /></figure><h3>“Roads? Where We’re Going, We Don’t Need Roads.”</h3><p>Imagine a tool that could download any binary you want on GitHub. With a few clicks — you’ve installed it on your computer. Forget manual downloads, constant updates, symlink creations because with HubApp — it does that for you.</p><p>The hubapp command line tool lets you install app binaries from github user&#39;s releases. Once installed, simply select the version you require from the dropdown and start using the downloaded github user&#39;s app.</p><p>See installation guide here: <a href="http://hubapp.warrensbox.com">hubapp installation (hubapp.warrensbox.com)</a></p><h3>Installation</h3><p>hubapp is available for MacOS and Linux based operating systems.</p><h4>Homebrew</h4><p>Installation for MacOS is the easiest with Homebrew. <a href="https://brew.sh/">If you do not have homebrew installed, click here</a>.</p><pre>brew install warrensbox/tap/hubapp</pre><h4>Linux</h4><p>Installation for other linux operation systems.</p><pre>curl -L https://raw.githubusercontent.com/warrensbox/hubapp/release/install.sh | bash</pre><h4>Install from source</h4><p>Alternatively, you can install the binary from source <a href="https://github.com/warrensbox/hubapp/releases">here</a></p><h3>How to use</h3><h4>Use dropdown menu to select version</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*HChXEG9Q8vD_ogxV.gif" /></figure><ol><li>You can install and switch between different versions of github user’s app by typing the command hubapp install user/repo on your terminal.</li><li>Select the version of binary by using the up and down arrow.</li><li>Hit <strong>Enter</strong> to install the desired version.</li></ol><p>The most recently selected versions are presented at the top of the dropdown.</p><h4>Upgrade current version</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*jR15VHcmMbm5aeD_.gif" /></figure><ol><li>You can also upgrade to latest version of the app.</li><li>For example, hubapp upgrade user/repo to upgrade to a higher version of the app.</li><li>Hit <strong>Enter</strong> to upgrade.</li></ol><h4>Un-install binary</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*ScxOULUJ--4BoITE.gif" /></figure><ol><li>You can also uninstalled github user’s.</li><li>For example, hubapp upgrade user/repo to uninstall to a higher version of the app.</li><li>Hit <strong>Enter</strong> to uninstall.</li></ol><h4>“Great Scott!” — Happy downloading!</h4><p>Source code : <a href="https://github.com/warrensbox/hubapp/">https://github.com/warrensbox/hubapp/</a><br>Written in : GO</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4d5939fc6a61" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to help your coworkers get vaccinated in 7 steps]]></title>
            <link>https://warrensbox.medium.com/how-to-help-your-coworkers-get-vaccinated-in-7-steps-5fe4d4f05dc4?source=rss-b22c913cfb2------2</link>
            <guid isPermaLink="false">https://medium.com/p/5fe4d4f05dc4</guid>
            <category><![CDATA[vaccines]]></category>
            <category><![CDATA[slack]]></category>
            <category><![CDATA[aws-lambda]]></category>
            <category><![CDATA[automation]]></category>
            <category><![CDATA[covid19]]></category>
            <dc:creator><![CDATA[Warren Veerasingam]]></dc:creator>
            <pubDate>Sun, 11 Apr 2021 20:17:22 GMT</pubDate>
            <atom:updated>2021-04-13T17:38:15.192Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*gj8GDU1kzKQB4rFF8ongYg.jpeg" /></figure><p>“You’re discussing tactics! Do you realize what this really comes down to? Millions and millions of lives hanging on what this vessel does next!” — McCoy to Spock. <br>“I’m not a doctor dammit, but an engineer.” — that’s probably what I would say to McCoy.</p><p>Well, in case you were not on earth last year; we were hit by a global pandemic — Covid-19. Covid-19 is a new disease, caused by a novel (or new) coronavirus that has not previously been seen in humans. Luckily for us humans— a vaccine is now available (although it’s not tested on Klingon yet).</p><p>While some states might have an efficient vaccine rollout plan, other states are struggling to get people vaccination. In my state, the governor purchases the vaccines and distributes it to local pharmacies. So, if you want to get vaccinated, you need to make an appointment with a local pharmacy.</p><p>The problem with that is you have to visit their website and hit refresh until you find an appointment available. Unless you don’t have a full time job or you find pleasure staring at screen, I have a better way to solve this problem — we send a push notification when a vaccine appointment becomes available at a local pharmacy. If your company or you have an AWS account, you can set this up for the company. This way, all your coworkers can get notified when there’s a vaccination opportunity near them. Your coworkers can get notified via Slack (that’s what I do), Microsoft Teams, plain ol’ email or SMS.</p><p>If you have read this far and would like to pursue this effort, the following are the steps to set this up on your AWS account. Remember, the “Logic clearly dictates that the <strong>needs of the many</strong> outweigh the <strong>needs</strong> <strong>of the few</strong>.” You can make a difference at your workplace or community!</p><h3>What is this application about?</h3><p>A lightweight application (lambda function) that notifies you when a vaccine appointment becomes available near you. Get notified on:</p><ul><li>Slack</li><li>Microsoft Teams</li><li>Email</li><li>SMS (text message)</li></ul><h3>Workflow</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*MJmirakFYxhaRd-0texKEg.png" /></figure><ol><li>CloudWatch will periodically trigger lambda.</li><li>The lambda function (Notifier app) will call the following API: https://www.vaccinespotter.org/api/v0/states/&lt;STATE&gt;.json</li><li>With the returned payload from the API, we will check against DynamoDB if the alert has been sent before. If it’s the same as the previous alert, the function does nothing.</li><li>If the alert is new and is different than the previous alert, the function will trigger the SNS Topic.</li><li>All resources subscribing to the SNS topic will receive the alert.</li></ol><h3>Step-by-step guide</h3><h4>1. Create IAM Policy</h4><ul><li>Navigate to the IAM Page on AWS console</li><li>Create new policy — covid-vaccine-all-lambda</li><li>Update &lt;update-account-number-here&gt; with your AWS account number</li></ul><pre>&quot;Statement&quot;: [<br>        {<br>            &quot;Effect&quot;: &quot;Allow&quot;,<br>            &quot;Action&quot;: [<br>                &quot;dynamodb:BatchGetItem&quot;,<br>                &quot;dynamodb:GetItem&quot;,<br>                &quot;dynamodb:Query&quot;,<br>                &quot;dynamodb:Scan&quot;,<br>                &quot;dynamodb:BatchWriteItem&quot;,<br>                &quot;dynamodb:PutItem&quot;,<br>                &quot;dynamodb:UpdateItem&quot;<br>            ],<br>            &quot;Resource&quot;: &quot;arn:aws:dynamodb:us-east-1:&lt;update-account-number-here&gt;:table/Covid&quot;<br>        },<br>        {<br>            &quot;Effect&quot;: &quot;Allow&quot;,<br>            &quot;Action&quot;: [<br>                &quot;logs:CreateLogStream&quot;,<br>                &quot;logs:PutLogEvents&quot;<br>            ],<br>            &quot;Resource&quot;: &quot;arn:aws:logs:us-east-1:&lt;update-account-number-here&gt;:*&quot;<br>        },<br>        {<br>            &quot;Effect&quot;: &quot;Allow&quot;,<br>            &quot;Action&quot;: &quot;logs:CreateLogGroup&quot;,<br>            &quot;Resource&quot;: &quot;*&quot;<br>        }<br>    ]<br>}</pre><h4>2. Create IAM Role</h4><ul><li>Navigate to the IAM Page on AWS console</li><li>Create new Role</li><li>For ‘Choose a use case’, select Lambda</li><li>Filter for the policy you’ve created in the previous step covid-vaccine-all-lambda</li><li>Name the new role — covid-vaccine-all-role</li></ul><h4>3. Create SNS Topic</h4><ul><li>Navigate to the SNS Page on AWS console</li><li>Create topic</li><li>Type: Standard</li><li>Name: covid-vaccine-notifier</li><li>You will need the Topic ARN for the next step. Copy for later use</li></ul><h4>4. Create Dynamo Table</h4><ul><li>Navigate to the DynamoDb Page on AWS console</li><li>Create new table</li><li>Table name: Covid</li><li>Primary key* : Partition key: Source Type: string</li></ul><h4>5. Create Lambda Function</h4><ul><li>Navigate to the Lambda Page on AWS console</li><li>Create new lambda function</li><li>Function name: covid-vaccine-notifier</li><li>Runtime: Go 1.x</li><li>Change default execution role: Use an existing role</li><li>Existing role (created in previous step): covid-vaccine-all-role</li><li>Download latest zip file covid-vaccine-notifier-lambda.zip from <a href="https://github.com/warrensbox/covid-vaccine-tracker/releases">github release here</a></li><li>Upload the zip file from previous step</li><li>Update Runtime setting to: bin/covid-vaccine-notifier</li><li>Navigate to the Configuration tab</li><li>Navigate to Environment variables</li><li>Insert the following environment variables:</li><li><strong>MUTE</strong>: hyvee (the pharmacies you would like to mute)</li><li><strong>RANGE_A</strong>: 00000 (starting range of zipcode — leave blank if you want the whole state)</li><li><strong>RANGE_B</strong>: 99999 (ending range of zipcode — leave blank if you want the whole state)</li><li><strong>SOURCE</strong>: covid-vaccine-notifier (you don’t have to change this)</li><li><strong>STATE</strong>: IA (match the state you’re living)</li><li><strong>TABLE_ID</strong>: 2019 (you don’t have to change this)</li><li><strong>TABLE_NAME</strong>: Covid (you don’t have to change this)</li><li><strong>TOPIC_ARN</strong>: (paste the topic ARN from the previous step)</li><li><strong>AWS_REGION</strong>: Default is us-east-1</li><li>See example:</li></ul><figure><img alt="" src="https://cdn-images-1.medium.com/max/705/1*kYfpqupfLa6rTd5Bq9_Uew.png" /></figure><h4>6. Create CloudWatch Rule</h4><ul><li>Navigate to the CloudWatch Page on AWS console</li><li>Navigate to Events-&gt; Rules</li><li>Create Rule</li><li><strong>Step 1</strong>: Event Source. Choose Schedule</li><li>Enter the rate you want the API to be checked. Ideally it would be 5 minutes</li><li>Target: Choose Lambda function</li><li>Function: covid-vaccine-notifier</li></ul><h4>7. Create Subscription</h4><ul><li>Navigate to the SNS Page on AWS console</li><li>On side bar, select Subscription</li><li>Next, Create subscription</li><li>On dropdown — Select the SNS Topic ARN , created in previous step — arn:aws:sns:us-east-1:&lt;update-account-number-here&gt;:covid-vaccine-notifier</li><li>Protocol — Choose <strong>SMS for text message notification or Email for email notification</strong></li><li>Both Slack and Teams channel should have an option to send emails to that channel.</li></ul><h4>How to get email for Slack</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/500/1*vZIlC5Kj2DlQg4G2TkRFpw.png" /></figure><h4>How to get email for Team</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/800/1*v_ffUVFWujaHhYUBdILmhA.png" /></figure><h3>That’s it!</h3><p>If you have any questions, leave a comment or open an issue <a href="https://github.com/warrensbox/covid-vaccine-tracker/issues">here</a>.</p><p>Resources: <a href="https://github.com/warrensbox/covid-vaccine-tracker">https://github.com/warrensbox/covid-vaccine-tracker</a></p><p>Live long and prosper 🖖</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5fe4d4f05dc4" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to manage different terraform versions for each project?]]></title>
            <link>https://warrensbox.medium.com/how-to-manage-different-terraform-versions-for-each-project-51cca80ccece?source=rss-b22c913cfb2------2</link>
            <guid isPermaLink="false">https://medium.com/p/51cca80ccece</guid>
            <category><![CDATA[infrastructure-as-code]]></category>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[devops]]></category>
            <category><![CDATA[software-architecture]]></category>
            <category><![CDATA[terraform]]></category>
            <dc:creator><![CDATA[Warren Veerasingam]]></dc:creator>
            <pubDate>Wed, 24 Oct 2018 21:53:39 GMT</pubDate>
            <atom:updated>2020-04-16T23:29:42.977Z</atom:updated>
            <content:encoded><![CDATA[<h3>How to manage different terraform versions for each project</h3><p>A command-line tool to switch between different versions of terraform.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/575/1*AQAURRCVPBpOBiP65Gqs9A.png" /></figure><p><em>“We are trapped in a savage parallel universe from which we must escape within four hours, or I will face a death sentence at Mr. Spock’s hands”— Captain’s log, stardate unknown.</em><br>Unlike Star Trek, we don’t need to jump between different parallel universes to escape death.However, when building a complex infrastructure for multiple projects, we may have to jump between different versions of development tools.</p><h4>Enter Terraform</h4><p>Terraform lets you safely and predictably create, change, and improve infrastructure. It is an open source tool that codifies APIs into declarative configuration files that can be shared amongst team members, treated as code, edited, reviewed, and versioned.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*RcoMjgouPoInjitUY5NXYQ.png" /></figure><p>As infrastructure providers like AWS, Azure, or Google Cloud Compute evolve and add new features, Hashicorp releases incremental versions of terraform to support these features. So, older projects may be on an older version while newer projects might require a newer version of terraform.</p><p><strong>So, how do we switch between different versions of terraform?</strong></p><h3>Brew tap install terraform — tfswitch</h3><p>The tfswitch command line tool lets you switch between different versions of <a href="https://www.terraform.io/">terraform</a>. If you do not have a particular version of terraform installed, tfswitch will download the version you desire. The installation is minimal and easy. Once installed, simply select the version you require from the dropdown and start using terraform.</p><p>tfswitch is available for MacOS and Linux based operating systems. To use brew, you need homebrew installed. Homebrew simplifies the install process and makes updating easy. To install brew : <a href="https://brew.sh/">https://brew.sh/</a></p><h4>MacOS with brew</h4><pre>brew install warrensbox<strong>/</strong>tap<strong>/</strong>tfswitch</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*5-gm9BB-vpNYl3sY2E4bVw.gif" /></figure><h4>Linux</h4><p>Installation for Linux operation systems.</p><pre>curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh | bash</pre><h4>Install from source</h4><p>Alternatively, you can install the tfswitch binary from the source <a href="https://github.com/warrensbox/terraform-switcher/releases">here</a></p><h4>How to use:</h4><p><strong>Use the dropdown menu to select a version</strong></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/522/1*aSKmaxeEPXTM2h5HuCgXhg.gif" /></figure><ol><li>You can switch between different versions of terraform by typing the command tfswitch on your terminal.</li><li>Select the version of terraform you require by using the up and down arrow.</li><li>Hit <strong>Enter</strong> to select the desired version.</li></ol><p>The most recently selected versions are presented at the top of the dropdown.</p><h4>Supply version on command line</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/532/1*7zfYpW5xVVa3aGJJ1oJ_rw.gif" /></figure><ol><li>You can also supply the desired version as an argument on the command line.</li><li>For example, tfswitch 0.10.5 for version 0.10.5 of terraform.</li><li>Hit <strong>Enter</strong> to switch.</li></ol><h3>See all versions including beta, alpha and release candidates(RC)</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*yAICUU2tIpWSybpN" /></figure><ol><li>Display all versions including beta, alpha and release candidates(RC).</li><li>For example, tfswitch -l or tfswitch --list-all to see all versions.</li><li>Hit Enter to select the desired version.</li></ol><h3>Use version.tf file</h3><p>If a .tf file with the <em>terraform constrain</em> is present in the current directory, it should automatically download or switch to that terraform version. For example, the following should automatically switch terraform to version 0.12.24:</p><pre>terraform {<br>  required_version = &quot;&gt;= 0.12.9&quot;<br><br>  required_providers {<br>    aws        = &quot;&gt;= 2.52.0&quot;<br>    kubernetes = &quot;&gt;= 1.11.1&quot;<br>  }<br>}</pre><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*00be5h3Jf_Fc8xgTF2qm-Q.gif" /></figure><h3>Use .tfswitch.toml file (For non-admin — users with limited privilege on their computers)</h3><p>This is similar to using a .tfswitchrc file, but you can specify a custom binary path for your terraform installation</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*Bfno0q6RKb13P22F" /></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*o5ai4wCaseR6TfwH" /></figure><ol><li>Create a custom binary path. Ex: mkdir /Users/warrenveerasingam/bin (replace warrenveerasingam with your username)</li><li>Add the path to your PATH. Ex: export PATH=$PATH:/Users/warrenveerasingam/bin (add this to your bash profile or zsh profile)</li><li>Pass -b or — bin parameter with your custom path to install terraform. Ex: tfswitch -b /Users/warrenveerasingam/bin/terraform 0.10.8</li><li>Optionally, you can create a .tfswitch.toml file in your terraform directory.</li><li>Your .tfswitch.toml file should look like this:</li></ol><pre>bin = &quot;/Users/warrenveerasingam/bin/terraform&quot;<br>version = &quot;0.11.3&quot;</pre><p>Run tfswitch and it should automatically install the required terraform version in the specified binary path</p><h3>Use .tfswitchrc file</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*mxYEEWxLGfgsSz3H" /></figure><ol><li>Create a .tfswitchrc file containing the desired version</li><li>For example, echo &quot;0.10.5&quot; &gt;&gt; .tfswitchrc for version 0.10.5 of terraform</li><li>Run the command tfswitch in the same directory as your .tfswitchrc</li></ol><p>Automatically switch with bash</p><p>Add the following to the end of your ~/.bashrc file:</p><pre>cdtfswitch(){<br>  builtin cd &quot;$@&quot;;<br>  cdir=$PWD;<br>  if [ -f &quot;$cdir/.tfswitchrc&quot; ]; then<br>    tfswitch<br>  fi<br>}<br>alias cd=&#39;cdtfswitch&#39;</pre><p>Automatically switch with zsh</p><p>Add the following to the end of your ~/.zshrc file:</p><pre>load-tfswitch() {<br>  local tfswitchrc_path=&quot;.tfswitchrc&quot;</pre><pre>  if [ -f &quot;$tfswitchrc_path&quot; ]; then<br>    tfswitch<br>  fi<br>}<br>add-zsh-hook chpwd load-tfswitch<br>load-tfswitch</pre><p>NOTE: if you see an error like this: command not found: add-zsh-hook, then you might be on an older version of zsh (see below), or you simply need to load add-zsh-hook by adding this to your .zshrc:</p><pre>autoload -U add-zsh-hook</pre><p><em>Older version of zsh</em></p><pre>cd(){<br>  builtin cd &quot;$@&quot;;<br>  cdir=$PWD;<br>  if [ -f &quot;$cdir/.tfswitchrc&quot; ]; then<br>    tfswitch<br>  fi<br>}</pre><h3>Jenkins setup</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/371/1*NXBOA5EWSu5AhZ2N-L-cWA.png" /></figure><pre>#!/bin/bash <br><br>echo &quot;Installing tfswitch locally&quot;<br>wget https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh <br>chmod 755 install.sh<br>./install.sh -b bin-directory<br><br>./bin-directory/tfswitch</pre><h3>Conclusion</h3><p>tfswitch<strong> </strong>lets you install any terraform version on your computer with minimal effort. Rather than installing terraform manually from the source, with tfswitch, you can simply select any version from the dropdown option or provide the desired version as a parameter.</p><p>CAUTION: Be cautious of the terraform version that you are using for each project when you switch directories</p><p>If you like this project, give us a star here: <a href="https://github.com/warrensbox/terraform-switcher">https://github.com/warrensbox/terraform-switcher</a></p><p><strong><em>Resources<br></em></strong><a href="https://github.com/hashicorp/terraform/releases"><em>https://github.com/hashicorp/terraform/releases</em></a></p><p><a href="https://github.com/warrensbox/terraform-switcher">https://github.com/warrensbox/terraform-switcher</a></p><p><em>Official download page at: </em><a href="https://www.terraform.io/downloads.html"><em>https://www.terraform.io/downloads.html</em></a></p><p><em>For older versions, you can install it from their release page:<br></em><a href="https://releases.hashicorp.com/terraform/"><em>https://releases.hashicorp.com/terraform/</em></a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/400/1*51gGoZDXadRYkwURNVJNnQ.png" /></figure><p><em>Warren’s Box contains a selection of DevOps tools that are useful for Systems Engineers, DevOps Engineers, and SREs. Most tools are can be easily installed on UNIX based operating systems.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=51cca80ccece" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[ON-CALL NIGHTMARE: 5 ways to fix your on-call alerts]]></title>
            <link>https://warrensbox.medium.com/on-call-nightmare-5-things-to-fix-with-on-call-alerts-44cef57631a5?source=rss-b22c913cfb2------2</link>
            <guid isPermaLink="false">https://medium.com/p/44cef57631a5</guid>
            <category><![CDATA[aws]]></category>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[devops]]></category>
            <category><![CDATA[coding]]></category>
            <category><![CDATA[software-engineering]]></category>
            <dc:creator><![CDATA[Warren Veerasingam]]></dc:creator>
            <pubDate>Tue, 04 Sep 2018 02:53:55 GMT</pubDate>
            <atom:updated>2018-09-04T16:11:48.652Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*W4VLlnYyvkB6GzYQqVGc1w.jpeg" /></figure><p><em>“Wait a minute. We boost the signal. That’s it. We transmit that telephone number through Torchwood itself, using all the power of the Rift. And we’ve got Mister Smith. He can link up with every telephone exchange on the Earth. He can get the whole world to call the same number, all at the same time. Billions of phones, calling out all at once. Transmitting, then this Subwave Network is going to become visible. I mean, to the Daleks. Yes, and they’ll trace it back to me. But my life doesn’t matter. Not if it saves the Earth” —said Harriet to the rest of the team at Torchwood (Doctor Who — The Stolen Earth)</em></p><p>If only we had way to call the Doctor or use advanced technological communication tools to combine all future knowledge to resolve our on-call alerts, I wouldn’t be writing this article.</p><h4>1. Alerts should be directed to the right team or person</h4><p>Here’s a scenario: You’re a developer, and you don’t have access to the infrastructure or servers. At 2 am on a Saturday, you get an automated alert on your phone informing you that the CPU is high. And within minutes, the application goes down.</p><p><strong><em>At this point, what do you do? </em></strong><br>You might need to call the DevOps team for access to the infrastructure and request for an increase to the number of servers or, add more CPU or memory to your servers. <strong>This extra step is unnecessary and will only increase the downtime.</strong></p><p>The fastest way to resolve an alert is to direct the alert to the right person or team to resolve the issue. When there are more points of communication, the original message may be lost or become inaccurate between the source and receiver. The fewer the path of communication, the faster the issue will be resolved.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/860/1*DPTPA8bVG5B7rTnXxbAoIA.png" /><figcaption>When there are more points of communication, the original message may be lost or become inaccurate between the source and receiver.</figcaption></figure><h4>2. Phone call alert VS Email alert</h4><p>Product owners want to monitor everything — CPU, memory, network, bandwidth, and so on. They, however, do not want to be responsible to resolve the alerts.</p><p>We should be selective when deciding between alerts that deserve a phone call or a simple email. You do not want your phone to go off at the middle of the night because your server’s CPU spiked at 70% and went down back to 30% a minute later. You need to measure and set the right thresholds to alert the person on-call. The on-call person may regard unnecessary alerts or false alerts as noise. And, eventually ignore the noise.</p><p>If an alert does not require urgent attention, configure the alert to be sent as an email or a slack message. Developers and DevOps engineers can simply monitor the alert and adjust the threshold accordingly to prevent future misleading alerts.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/420/1*HDacu-28IbfSJUjvvDaqDg.png" /></figure><h4><strong>3. Set a meaningful message in your alert</strong></h4><p>The on-call person should be able to see what is the issue as quickly as possible from the alert message. The alert should provide a meaningful message. For example:</p><p><strong>Bad Alert:</strong></p><blockquote><strong>“High CPU usage”</strong></blockquote><p><strong>Good Alert:</strong></p><blockquote><strong>“High CPU usage on 10.168.16.10. CPU exceeded 100% for 3 consecutive times in 5 minutes. [link to metrics dashboard]”</strong></blockquote><p>The alert message should include a link to the metrics, graphs and history, where the on-call person can see the server’s past history and trend.</p><h4><strong>4. We should fix the problem to prevent future alerts or better yet, create a self healing infrastructure</strong></h4><p>We tend to look at our application’s health in a very binary way. This means a application is either up or down. If it’s up, it’s good, otherwise we need to restart the application.</p><p>We should shift our paradigm and view applications in a non-binary way. If the application is unhealthy, we automate steps to make it healthy again.</p><p>When we are ill, our immune system does not simply let us die and restart our body again. Our immune system is designed to recognize the cells that make up our bodies and repel any foreign invaders such as viruses.</p><p>Perhaps we could design a similar self healing system to maintain and improve the health of our applications.</p><p>We should practice writing automation scripts to fix the issue when an alert is triggered.</p><p>Over time, we should study the pattern and behavior of failures, we should fix the application or the infrastructure to prevent future issues.</p><h4><strong>5. Set a protocol, a workflow — steps to take and provide resources to resolve an alert</strong></h4><p>When you are new to a team, you may not know what are the necessary steps to resolve an alert. This can be stressful and may cause more damage.</p><p>Every team should have an on-call manifesto. This manifesto should describe the steps to take to resolve each alert for each application.</p><p>For example, <br>Alert A — may require you to: <br>1) Close any database connection<br>2) Restart the application<br>3) Notify the development team</p><p>Alert B — may require you to: <br>2) Shut down the server<br>2) Increase the memory size of the server<br>3) Restart the application</p><p>Proper documentation to resolve an issue may reduce the downtime of our application.</p><h3><strong>Conclusion</strong></h3><p>The goal is to get fewer alerts. The more resilient we build our infrastructure or application, the fewer alerts are triggered. Alerts should be directed to the right person or team. This way, the right person has the permission or tools to resolve the issue as quickly as possible. We have to set priorities to alerts. Urgent alerts need to be directed as phone calls, while warning alerts can be sent as emails. Unnecessary alerts may become noise if it does not need immediate attention. An on-call person should be able to see the issue as quickly as possible from the alert message. We should design systems that can heal itself when something goes wrong. Every team should have an on-call manifesto. That way, your team knows the proper steps to take to resolve an issue.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=44cef57631a5" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[FOUND: 7 lost principles of continuous delivery]]></title>
            <link>https://warrensbox.medium.com/found-7-lost-principles-of-continuous-delivery-2125a3049d09?source=rss-b22c913cfb2------2</link>
            <guid isPermaLink="false">https://medium.com/p/2125a3049d09</guid>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[software-architecture]]></category>
            <category><![CDATA[software-engineering]]></category>
            <category><![CDATA[continuous-delivery]]></category>
            <category><![CDATA[agile]]></category>
            <dc:creator><![CDATA[Warren Veerasingam]]></dc:creator>
            <pubDate>Mon, 14 May 2018 01:11:18 GMT</pubDate>
            <atom:updated>2018-06-02T07:06:39.519Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*kz6-4Xso9YA2zeZLpJI3Ng.jpeg" /></figure><p>“You Americans, you’re all the same. Always overdressing for the wrong occasions” said Major Toht (<em>Raiders of the Lost Ark). </em>Sometimes… that’s how I feel about the continuous delivery process. We overdo the delivery process for the wrong reasons. Here are 7 things to keep in mind while practicing continuous delivery:</p><blockquote>It’s not about “can we build it?”, it’s about “should we build it?”</blockquote><h4>1. Create a repeatable and reliable process for releasing software</h4><p>Ask yourself, “How long would it take your organization to deploy a change that involves just one single line of code?”</p><p>We live in a world where shortened release cycles are a necessity. With agile development practices and continuous integration (CI), it is imperative for teams to have access to a stable tool which can manage the process of building, testing and deploying software as changes are made.</p><p>For a long time, Jenkins has been the tool of choice among developers, but as many companies have moved into the cloud, and in particular, AWS ecosystem, other tools such as Bamboo, AWS CodePipline, Go CD are gaining traction. The underlying purpose of these tools remains the same — to release your software.</p><p>Every change committed to source control triggers the creation of a new instance of the pipeline. We call this a release candidate. If the release candidate passes all the tests, it can be released.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*_cfvZWOlwQctBP-_76Ch9Q.png" /></figure><p>Deploying through the pipeline involves three main phases:</p><ul><li><strong>Building the infrastructure </strong>— provisioning and managing the environment in which your software will run</li><li><strong>Installing the software and its dependencies</strong> — installing the correct version of the software into the infrastructure</li><li><strong>Setting up configuration for software </strong>— configuring your software and database, including any data or state it requires</li></ul><p>The deployment of your software can be implemented using a fully automated process from version control. Hardware cannot be kept in version control, but you can use provisioning tools, like Chef, Puppet or Terraform. With these provisioning tools you are able to codify your configuration and commit them into your source control.</p><p><em>“The key in such a transition to continuous delivery is to expect things to get worse before you’ll be able to make them better.” — Matthias Marschal</em></p><h4>2. Automate, if possible, everything</h4><p>Automation is a prerequisite for the deployment pipeline because it is only through automation that we can guarantee that people will get what they need at the push of the button.</p><p><em>“The most powerful tool we have as developers is automation.” — Scott Hanselman</em></p><p>When you’re not automating the process, you’re creating manual one. These manual steps usually require communication from a person to another. As the path of communication gets wider, the original set of instructions or documentation are misinterpreted, miscommunicated, and not maintained. <br>Computers, on the other hand, are way better at running repetitious tasks accurately. We should write scripts to automate any manual process in our release process. Commit the automation script in source control for other developers to collaborate and improve the process.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/404/1*r_-_ZWam5n6mQn0o121-6g.png" /><figcaption>Source xkcd: https://xkcd.com</figcaption></figure><p>Automation is about taking once manual processes and placing technology around them so they’re inherently repeatable. Before we automate a process, we should go back to the drawing board and list the steps that would make the automated process shorter and faster compared to the manual process. Otherwise, if your processes are bad or flawed, then you’re just making bad processes happen faster.</p><p>Automation will ultimately improve production velocity and quality.</p><h4>3. Keep everything under version control</h4><p>Everything should be committed into source control, not just your software code. Version control isn’t all about having backups. That is only a side effect. Version control is about documenting and annotating the process of creation, and it is uniquely necessary for programming because of how eternally iterative programming is. Code that is not annotated with its history and its motivations suffers to an extreme degree of entropy, becoming more and more difficult to understand.</p><p>Configuration settings have a lifecycle completely different from that of code, while passwords and other sensitive information should not be checked into version control. Ensure that your configuration information is modular and encapsulated so that changes in one place don’t have knock-on effects for other, unrelated pieces of configuration. Be minimalistic. Keep the configuration information as simple and focused as possible. This includes ‘requirement’ documents, test scripts, automated test cases, network configuration scripts, deployment scripts, database creation, database maintenance scripts, technical documentation and so on. These scripts should be version-controlled, and the relevant version should be identifiable for any given build — these change sets should have a single identifier, such as a build number or version control change set number, that references every piece.</p><p>Ask yourself:</p><p>Could you completely re-create your live environment (like production), excluding production date, from scratch with the version-controlled assets that you store?</p><p>Can you regress to an earlier, known good state of your application?</p><h4>4. If it hurts, do it more often — bring the pain forward</h4><p>If testing is a painful process that occurs just before release, don’t do it at the end. Instead, do it continually from the beginning of the project. In the same way that your application and build scripts need testing, so do your configuration settings. Ensure that references to external services in your configuration settings are good.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/800/1*JzfT1_6ks3NZplnpmP-Vyg.png" /></figure><blockquote>Ronny Kohavi, who directed Amazon’s Data Mining and Personalization group before joining Microsoft as General Manager of its Experimentation Platform, reveal that 60%–90% of ideas do not improve the metric they were intended to improve. Thus if we’re not running experiments to test the value of new ideas before completely developing them, the chances are that about 2/3 of the work we are doing is of either zero or negative value to our customers — and certainly of negative value to our organization, since this work costs us in three ways. In addition to the cost of developing the features, there is an opportunity cost associated with more valuable work we could have done instead, and the cost of the new complexity they add to our systems (which manifests itself as the cost of maintaining the code, a drag on the rate at which we can develop new functionality, and often, reduced operational stability and performance).” — <strong>Lean Enterprise: How High Performance Organizations Innovate at Scale</strong></blockquote><p>Create a comprehensive automated test suite. At a minimum, you should have:</p><ul><li>Unit tests —this involves breaking your software into pieces and subjecting each piece to a series of tests. Tests are usually run periodically, often after every change to the source code. The more often the better, because the sooner you will catch problems.</li><li>Component test — this involves testing of specific module or program. It may be done in isolation from rest of the system depending on the life cycle model selected for that particular application. Component testing is like unit testing with the difference that the developer uses real data instead of dummy data for testing of the written code.</li><li>Acceptance test — is the test that the application meets. The acceptance criteria decided by the business — capacity, functionality, availability, scalability, and security</li></ul><p>Don’t comment out failing test. Delete it if it’s not relevant or refactor the test.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1018/1*lMVZgoZG1DGd-mHHJwD0Qg.png" /></figure><h4>5. <strong>Keep the build and test process short</strong></h4><p>The longer the release cycle, the longer the development team has to make incorrect assumptions before the deployment occurs, and the longer it will take them to fix it.</p><p>Speed is essential because there is an opportunity cost associated with not delivering software. Delivering fast is also important because it allows you to verify whether our features and bug fixes are really useful.</p><p>An important part of usefulness is quality. Our software should be fit for its purpose. Quality does not equal perfection.</p><p><em>“The perfect is the enemy of the good” — Voltaire.</em></p><p>Our goal should always be to deliver software of sufficient quality to bring value to its users. Check-in frequently. You should at least check-in your code a couple of times a day.</p><p>If the build takes too long, multiple commits would have taken place — you won’t know which check-in broke the build. Your build output should inform you the commit that triggered the build.</p><p>If the build process is too long, developers will check in less often because they have to sit around for ages waiting for the software to build, test and deploy.</p><p>We should wait for tests to pass before moving forward. That way we don’t compound the failure with more problems. Remember, build a little, test a little, deploy a little.</p><p>Don’t check-in on a broken build. This is the cardinal sin of continuous integration. If you continue to do so, it will take much longer for the build to be fixed, because you added more complexity to the problem.</p><p>Test locally on your machine before checking in your code.</p><p>Never go home on a broken build. For example, at 5:30 pm on a Friday, all your colleagues are leaving the office and you are itching to leave as well. You decide to check-in your code and leave. Your checked in code triggers a build and it fails. What do you do next? You have two options:</p><ul><li>revert the commit to a working version. Always be prepared to revert to the previous revision.</li><li>fix the broken test and build before you leave the door.</li></ul><p>If the build is broken, the feedback loop should be fast and efficient. It should notify the appropriate people to look at the build’s failure. Feedback is at the heart of any software delivery process. The best way to improve feedback is to make the feedback cycle short and the result visible.</p><h4>6. Make every part of the process of building, deploying, testing and releasing software visible to everybody involved</h4><p>Improve feedback so that problems are identified, and is resolved, as early as in the process as possible. Enable teams to deploy and release any version of their software to any environment at will through a fully automated process.</p><p>The entire team must act on a feedback — it is essential that everybody involved in the process of delivering software is involved in the feedback process. This includes software developers, release engineers, DevOps engineers, database administrators, security team, tester and product managers.</p><p>Is it easy for team members to get the information they need and to make the changes they need to make? Or does the strategy get in the way of efficient delivery, leading to increased cycle time and reduced feedback?</p><p>Often the poor collaboration that causes so many problems in deployment to staging is shored up with ad-hoc phone calls, emails, and quick fixes.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*7O39OqupyuvBVVcD2XCnXQ.png" /><figcaption><a href="https://continuousdelivery.com/foundations/test-automation/">https://continuousdelivery.com</a></figcaption></figure><p>Any changes or commits should trigger a feedback process — anything that changes between environment should be captured as configuration information. Feedback should be delivered as soon as possible. The key to a fast feedback is automation (see point 2). People are expensive and valuable, they should be focused on producing software.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/700/1*BTzSaurTGtUddUa69ty22Q.png" /><figcaption>Source xkcd: https://xkcd.com</figcaption></figure><h4>7. Done Means Released</h4><p><em>“Continuous is more often than you think” — Mike Roberts</em></p><p>Too often in software development, “done” doesn’t really mean “DONE!”. It doesn’t mean tested. It doesn’t necessarily mean styled. And it certainly doesn’t usually mean accepted by the product owner. It just means developed.</p><p><em>It’s also important to really</em><strong><em> </em></strong><em>complete each feature before moving on to the next. Of course, multiple features can be developed in parallel in a team situation. But within the work of each developer, do not move on to a new feature until the last one is shippable. This is important to ensure the overall product is in a shippable state at the end of the Sprint, not in a state where multiple features are 90% complete or untested, as is more usual in traditional development projects.</em></p><p><em>We should make sure that each feature is fully developed, tested, styled, and accepted by the product owner before counting it as “DONE!”. And if there’s any doubt about what activities should or shouldn’t be completed within the Sprint for each feature, “DONE!” should mean shippable — </em><a href="https://www.101ways.com/author/101ways_kelly/"><em>by Kelly Waters</em></a></p><ul><li>Done means monitoring is set up and working.</li><li>Done means there is an on-call schedule to attend any alerts if something goes wrong.</li><li>Done means the end users should be able to open a ticket to report a bug.</li><li>Done means the software is well tested.</li><li>Done means the software is able to scale up to handle high loads — completed load testing.</li><li>Done means your software is secure —completed security testing.</li></ul><p>DONE means shippable and functional.</p><h4>Conclusion</h4><p>Continuous integration requires that every time somebody commits any change, the entire application is built and a comprehensive test is run against it. Crucially, if the build or test fails, the development team stops whatever they are doing and fixes the problem immediately. The goal of continuous integration is that the software is in a working state all the time.</p><p>In order to create a reliable and repeatable process for releasing your software, we need to automate the release process as much as possible. Everything should be kept under source control. A software without adequate testing is not complete, therefore should not be released. Strive to keep the build and test process short. Build a little, test a little and deploy a little — repeat. When multiple teams are involved in the delivery process, the feedback loop is crucial and should be visible to everyone involved. When a software is considered “done”, it means it is shippable, functional and fully tested.</p><p>Interested in learning more about software development? Read my previous article on: <a href="https://medium.com/@warren_22827/7-things-you-dont-know-about-agile-architecture-c1125e53e5d6">Agile Architecture</a></p><p><em>This article is inspired by Dave Farley and Jez Humbel’s articles and book- </em><a href="http://www.continuous-delivery.co.uk/"><em>Continuous Delivery</em></a><em>, and Kelly Waters’s book- </em><a href="https://www.101ways.com/blog/"><em>All About Agile</em></a><em>. I had the privilege of attending Dave’s presentation in Chicago.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2125a3049d09" width="1" height="1" alt="">]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[7 things you don’t know about agile architecture]]></title>
            <link>https://warrensbox.medium.com/7-things-you-dont-know-about-agile-architecture-c1125e53e5d6?source=rss-b22c913cfb2------2</link>
            <guid isPermaLink="false">https://medium.com/p/c1125e53e5d6</guid>
            <category><![CDATA[agile]]></category>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[software-engineering]]></category>
            <category><![CDATA[software-architecture]]></category>
            <category><![CDATA[cloud-architecture]]></category>
            <dc:creator><![CDATA[Warren Veerasingam]]></dc:creator>
            <pubDate>Sun, 29 Apr 2018 22:11:02 GMT</pubDate>
            <atom:updated>2018-05-14T03:59:33.137Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*DWyRpSMZWv0buHi-UN3ybA.jpeg" /></figure><p>“What a stupid design! You are singlehandedly responsible for the destruction of our ultimate weapon and battle station!” said Vader to the guy who put the exhaust ports on the Death Star. We might have designed a complex and flawed architecture for our software and survived without being choked by Darth Vader. But, how can we architect better software.</p><p>Before we dive in, let’s ask ourselves, “<strong><em>What do we mean by software architecture?” <br></em></strong><em>- </em>Non-functional requirements?<br>- Framework?<br>- High-level decisions and abstractions?</p><p>Here’s a low-level description that I like:<br><em>All architecture is design but not all design is architecture. Architecture represents the significant design decisions that shape a system, where significant is measured by cost of change</em> — <em>Grady Booch</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/300/1*tewEvvx_mIFUKCed-zIqhw.png" /><figcaption><em>All architecture is design but not all design is architecture</em></figcaption></figure><p>And here’s a high-level description:<br><em>Architecture is the decisions that you wish you could get right early in a project, but that you are not necessarily more likely to get them right than any other — Ralph Johnson</em></p><h4>What makes good software architecture?</h4><h4>1. Change should not be expensive</h4><p>As the project moves forward, introducing changes should not be expensive. If the cost of changing or adding a new feature is high, it would take a longer time to release your software. In some cases, you may be unable to add a new features due to the constrains of the architecture.</p><h4>2. It should have a feedback loop. It’s a cycle.</h4><p><em>Architecture is a hypothesis, that needs to be proven by implementation and measurement — Tom Gilb <br></em>Architecture is an expression of an idea. Your job is to test the idea. Prove that it works. What you can build is influenced and constrained by how you build it…and vice-versa. It’s expensive to know everything upfront. You need to be okay with going back often and making changes as you move forward with the project. Architectural thinking is based on knowledge, which requires learning. Learning occurs throughout a software development project. Development increments should be based on functionality rather than component structure.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/720/1*SZBGFXbcYfYJcPDhOfRLug.png" /></figure><h4>3. Make it agile and lean</h4><p>Agile thinking emphasizes teamwork and response to change. Lean thinking focuses on the elimination of waste and improvement of flow. Again, making all the significant decisions up front is not responsible and if architecture is a hypothesis, we should use an empirical approach to test it. Sustainable agility requires good architecture; fast initial development does not — these are often confused.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/940/1*wf3D4C-ZqQmO1oyxpFincg.png" /></figure><h4>4. Aim for sooner rather than faster</h4><p>But what’s the difference? To illustrate, imagine you and your friend decide to do a road trip in two separate cars. While, your friend decides to use the GPS navigator, you decide to “wing” it. Both of you decide to leave point A at the same time and meet at point B using different routes.</p><p>While you may drive a <strong>faster</strong> car, if you get lost while driving to point B, your friend might reach <strong>sooner</strong> than you.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/776/1*oeu2TEPwVPq23GYpCIIAIA.png" /></figure><h4>5. Work in smaller teams to produce good software</h4><p><em>Today, we suffer from an almost universal idolatry of giantism. It is therefore necessary to insist on the virtues of smallness — where this applies . — E.F Schumacher.<br></em>The bigger the team, the harder it is to be flexible. Having more people on a project does not mean that the project will be completed sooner. There is no linear correlation.</p><p>Bigger teams require more communication. When there are more points of communication, the original message can be lost or become inaccurate between the source and receiver.</p><blockquote>Once at an Amazon offsite, managers had the reasonable-sounding suggestion that employees should be increasing communication with each other. To their surprise, founder and CEO Jeff Bezos stood up and announced, “No, communication is terrible!”</blockquote><blockquote>This stance explains his famous two-pizza team rule, that teams shouldn’t be larger than what two pizzas can feed. <em>More </em>communication isn’t necessarily the solution to communication problems — it’s how it is carried out. — <a href="http://blog.idonethis.com/two-pizza-team/">Janet Choi</a></blockquote><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*P6uxexXqBi6IFtUqgODhSw.png" /><figcaption>Allan Kelly — <a href="https://www.slideshare.net/allankellynet/no-prokects-beyond-projects-refreshed-version">Beyond Projects</a></figcaption></figure><p><em>Software development does not have economies of scale.<br>Development has diseconomies of scale — Allan Kelly</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/820/1*fPzA85NvM6bSFQ36BDV-sQ.png" /></figure><h4>6. Do not use speculation to add extra complexity to the architecture</h4><p>Use speculation and future requirements to decide between design alternatives. Use past change to forecast future change — look for change hot spots and high defect density. Structure the system with respect to rate of change and (un)certainty. Change is often the only constant.</p><p><em>The ability to simplify means to eliminate the unnecessary so that the necessary may speak — Hans Hofmann</em></p><p>Architectural definition is something that answers three questions:<br>▪ What are the structural elements of the system?<br>▪ How are they related to each other?<br>▪ What are the underlying principles and rationale that guide the answers to the previous two questions?</p><h4>7. Always think of 3 things that might go wrong</h4><p><em>Nothing is more dangerous than an idea, when you have only one idea — Émile-Auguste Chartier</em></p><p>We should always understand the context and richness of the software that we are designing. Based on that, we should propose at least 3 things that might go wrong. We need to validate our hypothesis on these potential failures or errors. When we are making progress developing our software, we are gaining more knowledge from things that work and don’t work. We should be comfortable starting from the beginning if we noticed a flaw in the architecture.</p><p>Architectural questions and considerations when redesigning our software:<br>▪ Where are the defects? Is there a reason they are distributed that way?<br>▪ Where are the ‘hard bits’? What makes them hard?<br>▪ Where are the ‘easy bits’? What makes them easy?<br>▪ What keeps changing? Why?<br>▪ What stays still? Why?</p><p><em>If you can’t think of three things that might go wrong with your plans, then there’s something wrong with your thinking — </em>Jerry Weinberg</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*xyg2UGNBeBSpk9rJwr4grw.png" /><figcaption>Kelvin Henney — Pattern-Oriented Software Architecture, On Patterns and Pattern Languages</figcaption></figure><h4>Conclusion</h4><p>Architecture is about codifying knowledge. Good architecture should be flexible. You should be able to iterate on your architecture until you get a Minimum Viable Product. Any changes in the future should not be costly. Keep it simple. Adding more developers to a project as the project grows will not automatically speed up the project. Don’t spend too much time at the beginning designing; instead, just build it and see what happens. With good architecture, you can make mistakes continually and still make progress.</p><p><em>Sustainable development is development that meets the needs of the present without compromising the ability of future generations to meet their own needs — The Report of the Brundtland Commission</em></p><p>Interested in learning more about software development? Read my other article on: <a href="https://medium.com/@warren_22827/found-7-lost-principles-of-continuous-delivery-2125a3049d09">7 Lost Principals of Continuous Delivery</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/250/1*r-ckX3bSTFgYekSmRYBZ2w.jpeg" /><figcaption>Warren Veerasingam, Kevlin Henney — GOTO; Chicago 2018</figcaption></figure><p><em>I met Kelvin Henney at the GOTO Chicago 2018 conference.</em><strong><em> </em></strong><em>Kevlin Henney is an author, presenter, and consultant on software development. He has written on the subject of </em><a href="https://en.wikipedia.org/wiki/Computer_programming"><em>computer programming</em></a><em> and development practice for many magazines and sites, including Better Software, </em><a href="https://en.wikipedia.org/wiki/The_Register"><em>The Register</em></a><em>, </em><a href="https://en.wikipedia.org/wiki/C/C%2B%2B_Users_Journal"><em>C/C++ Users Journal</em></a><em>, Application Development Advisor, JavaSpektrum, </em><a href="https://en.wikipedia.org/wiki/C%2B%2B_Report"><em>C++ Report</em></a><em>, Java Report, </em><a href="https://en.wikipedia.org/wiki/.EXE_Magazine"><em>EXE</em></a><em>, and </em><a href="https://en.wikipedia.org/wiki/Overload_(journal)"><em>Overload</em></a><em>. He is a member of the </em><a href="https://en.wikipedia.org/wiki/Institute_of_Electrical_and_Electronics_Engineers"><em>IEEE</em></a><em> Software Advisory Board. Henney is also coauthor of books on patterns and editor of 97 Things Every Programmer Should Know.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c1125e53e5d6" width="1" height="1" alt="">]]></content:encoded>
        </item>
    </channel>
</rss>